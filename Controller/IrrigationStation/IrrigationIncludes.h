
// Irrigation Process Includes interface file

#ifndef IRRIGATION_PROCESS_INCLUDES_H
#define IRRIGATION_PROCESS_INCLUDES_H

// #define IRRIGATION_PROCESS_DEBUG 1

typedef enum 
{ 
	SEQUENCE_UNINITIALIZED = 0,
	SEQUENCE_INITIALIZED,
	SEQUENCE_RUN_ONE_CYCLE_ONLY,
	SEQUENCE_CHECK_FOR_NEXT_CYCLE,			
	SEQUENCE_COMMENCE_CYCLE,
	SEQUENCE_START_PUMPS,
	SEQUENCE_OPEN_MAIN_VALVES,
	SEQUENCE_CONSTRUCT_VALVE_GROUP,
	SEQUENCE_OPEN_IRRIGATION_VALVES,
	SEQUENCE_COMMENCE_VALVE_GROUP,
	SEQUENCE_RUNNING,
	SEQUENCE_WATER_METER_MESSAGE,
	SEQUENCE_COMPLETE_VALVE_GROUP,
	SEQUENCE_CLOSE_IRRIGATION_VALVES,
	SEQUENCE_CLOSE_MAIN_VALVES,
	SEQUENCE_STOP_PUMPS,
	SEQUENCE_COMPLETE_CYCLE,
	SEQUENCE_COMPLETE_PROGRAM,
	SEQUENCE_UPDATE_DATABASE,
	SEQUENCE_FINISHED,
	SEQUENCE_FAILURE,
	SEQUENCE_PAUSE,
	SEQUENCE_RESUME,
	SEQUENCE_ABORT,
	SEQUENCE_PREEMPT,
	SEQUENCE_UNCOMPLETED,
	SEQUENCE_OPEN_MAIN_VALVE,
	SEQUENCE_CLOSE_MAIN_VALVE,
	SEQUENCE_OPEN_IRRIGATION_VALVE,
	SEQUENCE_CLOSE_IRRIGATION_VALVE,
	SEQUENCE_MAX_IRRIGATION_SEQUENCE_STATES
} IrrigationSequenceState; 

typedef struct 
{
	DBIndex valve_id;
	byte group_number;
} IrrigationValveGroup;

// DEVICE CONSTRUCTS

typedef enum 
{ 
	DEVICE_STATE_NONE,
	DEVICE_STATE_WAIT_ON,
	DEVICE_STATE_ON,
	DEVICE_STATE_WAIT_OFF,
	DEVICE_STATE_OFF
} DeviceState;

typedef enum 
{ 
	WATER_METER_PULSE_TIMEOUT_STATE_NONE,
	WATER_METER_PULSE_TIMEOUT_STATE_WAIT_ON,
	WATER_METER_PULSE_TIMEOUT_STATE_ON,
	WATER_METER_PULSE_TIMEOUT_STATE_WAIT_OFF,
	WATER_METER_PULSE_TIMEOUT_STATE_OFF
} WaterMeterPulseTimeOutState;

#endif

//typedef enum
//{
//	PAUSE_IRRIGATION,
//	RESUME_IRRIGATION,
//	PREEMPT_IRRIGATION,
//	ABORT_IRRIGATION
//} IrrigationManagerRequest;

//IrrigationSequenceState IrrigationSequenceRequestResponse[4] = 
//{
//	SEQUENCE_PAUSE,		// Request: PAUSE_IRRIGATION,
//	SEQUENCE_RESUME,	// Request: RESUME_IRRIGATION,
//	SEQUENCE_PREEMPT,	// Request: PREEMPT_IRRIGATION,
//	SEQUENCE_ABORT		// Request: ABORT_IRRIGATION
//};

//IrrigationSequenceState IrrigationSequenceRequestResponse[4] = 
//{
//	SEQUENCE_PAUSE,		// Request: PAUSE_IRRIGATION,
//	SEQUENCE_RESUME,	// Request: RESUME_IRRIGATION,
//	SEQUENCE_PREEMPT,	// Request: PREEMPT_IRRIGATION,
//	SEQUENCE_ABORT		// Request: ABORT_IRRIGATION
//};

//return IrrigationSequenceRequestResponse[request];

// Possible Database errors:
//
// INDEX_NOT_EXIST,
// INDEX_ALREADY_EXIST,
// RECORD_ALLOCATION_FAILED,
// DELETED_KEY_ALLOCATION_FAILED,
// RECORD_CHANGED_SINCE_LAST_READ,
// VALUE_TOOL_BIG,
// VALUE_TOOL_SMALL,
// TABLE_HAS_NO_LISTENERS,
// LISTENER_NOT_EXIST,
// LISTENER_ALREADY_EXIST,
// FIELD_NOT_EXIST,